{"ast":null,"code":"import memoize from 'memoize-one';\nimport { intlDateTimeFormatSupported, intlDateTimeFormatSupportedLocale } from './locale.js';\nimport Cache from './cache.js';\nvar cache = new Cache();\nvar INTL_DATE_TIME_FORMAT_SUPPORTED = intlDateTimeFormatSupported();\n\nvar FALLBACK_VERBOSE_DATE_FORMATTER = function FALLBACK_VERBOSE_DATE_FORMATTER(date) {\n  return date.toString();\n};\n/**\r\n * Returns a verbose date formatter.\r\n * \r\n * @param {string} locale - Date formatting locale\r\n * @param {object} format - Output format\r\n * @param {string} format.day     - Day format\r\n * @param {string} format.month   - Month format\r\n * @param {string} format.year    - Year format\r\n * @param {string} format.weekday - Weekday format\r\n * @param {string} format.hour    - Hour format\r\n * @param {string} format.minute  - Minute format\r\n * @param {string} format.second  - Second format\r\n *\r\n * @returns {Function} `(date) -> string`.\r\n */\n\n\nfunction getVerboseDateFormatter(locales, format) {\n  // Fall back to `date.toString()` for old web browsers.\n  // https://caniuse.com/#search=intl\n  if (!INTL_DATE_TIME_FORMAT_SUPPORTED) {\n    return FALLBACK_VERBOSE_DATE_FORMATTER;\n  } // If none of the `locales` are supported\n  // a default system locale will be used.\n\n\n  var locale = resolveLocale(locales); // `Intl.DateTimeFormat` format caching key.\n  // E.g. `\"{\"day\":\"numeric\",\"month\":\"short\",...}\"`.\n  // Didn't benchmark what's faster:\n  // creating a new `Intl.DateTimeFormat` instance\n  // or stringifying a small JSON `format`.\n  // Perhaps strigifying JSON `format` is faster.\n\n  var formatFingerprint = JSON.stringify(format); // Get `Intl.DateTimeFormat` instance for these `locale` and `format`.\n  // (`locale` can be `undefined`, hence the `String(locale)` conversion)\n\n  var formatter = cache.get(String(locale), formatFingerprint) || cache.put(String(locale), formatFingerprint, new Intl.DateTimeFormat(locale, format)); // Return date formatter\n\n  return function (date) {\n    return formatter.format(date);\n  };\n} // Even though `getVerboseDateFormatter()` function is called inside a\n// `useMemo()` hook, it's still invoked every time for different \n// `<ReactTimeAgo/>` elements on a page. There could be a lot of such\n// `<ReactTimeAgo/>` elements on a page. And `useMemo()` wouldn't speed up\n// the initial render. To work around that, simple argument-based memoization\n// is used.\n\n\nexport default memoize(getVerboseDateFormatter); // Caching locale resolving for optimizing pages \n// with a lot of `<ReactTimeAgo/>` elements (say, 100 or more).\n// `Intl.DateTimeFormat.supportedLocalesOf(locales)` is not instantaneous.\n// For example, it could be 25 milliseconds for 200 calls.\n\nvar resolvedLocales = {};\n/**\r\n * Resolves a list of possible locales to a single (\"best fit\") supported locale.\r\n * @param  {string[]} locales\r\n * @return {string}\r\n */\n\nfunction resolveLocale(locales) {\n  var localesFingerprint = locales.toString();\n\n  if (resolvedLocales[localesFingerprint]) {\n    return resolvedLocales[localesFingerprint];\n  }\n\n  return resolvedLocales[localesFingerprint] = intlDateTimeFormatSupportedLocale(locales);\n}","map":{"version":3,"sources":["/Users/trey/ProgrammingProjects/WerkAppFrontEnd/node_modules/react-time-ago/source/helpers/getVerboseDateFormatter.js"],"names":["cache","INTL_DATE_TIME_FORMAT_SUPPORTED","intlDateTimeFormatSupported","FALLBACK_VERBOSE_DATE_FORMATTER","date","locale","resolveLocale","formatFingerprint","JSON","formatter","String","Intl","memoize","resolvedLocales","localesFingerprint","locales","intlDateTimeFormatSupportedLocale"],"mappings":"AAAA,OAAA,OAAA,MAAA,aAAA;AAEA,SAAA,2BAAA,EAAA,iCAAA,QAAA,aAAA;AAKA,OAAA,KAAA,MAAA,YAAA;AAEA,IAAMA,KAAK,GAAG,IAAd,KAAc,EAAd;AAEA,IAAMC,+BAA+B,GAAGC,2BAAxC,EAAA;;AACA,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAA,IAAA,EAAI;AAAA,SAAIC,IAAI,CAAR,QAAIA,EAAJ;AAA5C,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAA,uBAAA,CAAA,OAAA,EAAA,MAAA,EAAkD;AACjD;AACA;AACA,MAAI,CAAJ,+BAAA,EAAsC;AACrC,WAAA,+BAAA;AAJgD,GAAA,CAOjD;AACA;;;AACA,MAAMC,MAAM,GAAGC,aAAa,CATqB,OASrB,CAA5B,CATiD,CAWjD;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAGC,IAAI,CAAJA,SAAAA,CAjBuB,MAiBvBA,CAA1B,CAjBiD,CAmBjD;AACA;;AACA,MAAMC,SAAS,GAAGT,KAAK,CAALA,GAAAA,CAAUU,MAAM,CAAhBV,MAAgB,CAAhBA,EAAAA,iBAAAA,KACjBA,KAAK,CAALA,GAAAA,CAAUU,MAAM,CAAhBV,MAAgB,CAAhBA,EAAAA,iBAAAA,EAA6C,IAAIW,IAAI,CAAR,cAAA,CAAA,MAAA,EAtBG,MAsBH,CAA7CX,CADD,CArBiD,CAwBjD;;AACA,SAAO,UAAA,IAAA,EAAI;AAAA,WAAIS,SAAS,CAATA,MAAAA,CAAJ,IAAIA,CAAJ;AAAX,GAAA;EAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeG,OAAO,CAAtB,uBAAsB,CAAtB,C,CAEA;AACA;AACA;AACA;;AACA,IAAMC,eAAe,GAArB,EAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAAA,aAAA,CAAA,OAAA,EAAgC;AAC/B,MAAMC,kBAAkB,GAAGC,OAAO,CAAlC,QAA2BA,EAA3B;;AACA,MAAIF,eAAe,CAAnB,kBAAmB,CAAnB,EAAyC;AACxC,WAAOA,eAAe,CAAtB,kBAAsB,CAAtB;AACA;;AACD,SAAOA,eAAe,CAAfA,kBAAe,CAAfA,GAAsCG,iCAAiC,CAA9E,OAA8E,CAA9E;AACA","sourcesContent":["import memoize from 'memoize-one'\r\n\r\nimport {\r\n\tintlDateTimeFormatSupported,\r\n\tintlDateTimeFormatSupportedLocale\r\n} from './locale.js'\r\n\r\nimport Cache from './cache.js'\r\n\r\nconst cache = new Cache()\r\n\r\nconst INTL_DATE_TIME_FORMAT_SUPPORTED = intlDateTimeFormatSupported()\r\nconst FALLBACK_VERBOSE_DATE_FORMATTER = date => date.toString()\r\n\r\n/**\r\n * Returns a verbose date formatter.\r\n * \r\n * @param {string} locale - Date formatting locale\r\n * @param {object} format - Output format\r\n * @param {string} format.day     - Day format\r\n * @param {string} format.month   - Month format\r\n * @param {string} format.year    - Year format\r\n * @param {string} format.weekday - Weekday format\r\n * @param {string} format.hour    - Hour format\r\n * @param {string} format.minute  - Minute format\r\n * @param {string} format.second  - Second format\r\n *\r\n * @returns {Function} `(date) -> string`.\r\n */\r\nfunction getVerboseDateFormatter(locales, format) {\r\n\t// Fall back to `date.toString()` for old web browsers.\r\n\t// https://caniuse.com/#search=intl\r\n\tif (!INTL_DATE_TIME_FORMAT_SUPPORTED) {\r\n\t\treturn FALLBACK_VERBOSE_DATE_FORMATTER\r\n\t}\r\n\r\n\t// If none of the `locales` are supported\r\n\t// a default system locale will be used.\r\n\tconst locale = resolveLocale(locales)\r\n\r\n\t// `Intl.DateTimeFormat` format caching key.\r\n\t// E.g. `\"{\"day\":\"numeric\",\"month\":\"short\",...}\"`.\r\n\t// Didn't benchmark what's faster:\r\n\t// creating a new `Intl.DateTimeFormat` instance\r\n\t// or stringifying a small JSON `format`.\r\n\t// Perhaps strigifying JSON `format` is faster.\r\n\tconst formatFingerprint = JSON.stringify(format)\r\n\r\n\t// Get `Intl.DateTimeFormat` instance for these `locale` and `format`.\r\n\t// (`locale` can be `undefined`, hence the `String(locale)` conversion)\r\n\tconst formatter = cache.get(String(locale), formatFingerprint) ||\r\n\t\tcache.put(String(locale), formatFingerprint, new Intl.DateTimeFormat(locale, format))\r\n\r\n\t// Return date formatter\r\n\treturn date => formatter.format(date)\r\n}\r\n\r\n// Even though `getVerboseDateFormatter()` function is called inside a\r\n// `useMemo()` hook, it's still invoked every time for different \r\n// `<ReactTimeAgo/>` elements on a page. There could be a lot of such\r\n// `<ReactTimeAgo/>` elements on a page. And `useMemo()` wouldn't speed up\r\n// the initial render. To work around that, simple argument-based memoization\r\n// is used.\r\nexport default memoize(getVerboseDateFormatter)\r\n\r\n// Caching locale resolving for optimizing pages \r\n// with a lot of `<ReactTimeAgo/>` elements (say, 100 or more).\r\n// `Intl.DateTimeFormat.supportedLocalesOf(locales)` is not instantaneous.\r\n// For example, it could be 25 milliseconds for 200 calls.\r\nconst resolvedLocales = {}\r\n\r\n/**\r\n * Resolves a list of possible locales to a single (\"best fit\") supported locale.\r\n * @param  {string[]} locales\r\n * @return {string}\r\n */\r\nfunction resolveLocale(locales) {\r\n\tconst localesFingerprint = locales.toString()\r\n\tif (resolvedLocales[localesFingerprint]) {\r\n\t\treturn resolvedLocales[localesFingerprint] \r\n\t}\r\n\treturn resolvedLocales[localesFingerprint] = intlDateTimeFormatSupportedLocale(locales)\r\n}"]},"metadata":{},"sourceType":"module"}